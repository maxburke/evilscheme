(begin

 (define a (lambda (i j)
            (/ 1.0 (+ (* (+ i j)
                         (/ (+ i (+ j 1)) 2.0)) 
                      (+ i 1)))))

 (define a-times-u-core (lambda (u au i j n)
                         (set! (vector-ref au i) (+ (vector-ref au j) (a i j)))
                         (if (< j n)
                          (a-times-u-core u au i (+ j 1) n))))

 (define a-times-u (lambda (u au i n)
                    (set! (vector-ref au i) 0)
                    (a-times-u-core u au i 0 n)
                    (if (< i n)
                     (a-times-u u au (+ i 1) n))))

 (define at-times-u-core (lambda (u au i j n)
                          (set! (vector-ref au i) (+ (vector-ref au j) (a j i)))
                          (if (< j n)
                           (a-times-u-core u au i (+ j 1) n))))

 (define at-times-u (lambda (u au i n)
                     (set! (vector-ref au i) 0)
                     (a-times-u-core u au i 0 n)
                     (if (< i n)
                      (at-times-u u au (+ i 1) n))))

 (define ata-times-u (lambda (u atau n)
                      (let ((v (make-vector n)))
                       (a-times-u u v 0 n)
                       (at-times-u v atau 0 n))))


 (define dot (lambda (v u n)
              (let* ((f (lambda (v u n i sum)
                          (if (eq n i)
                            sum
                            (let ((v0 (vector-ref v i))
                                  (u0 (vector-ref u i)))
                              (f v u n (+ i 1) (+ (* v0 v0) (* u0 u0))))))))
                (f v u n 0 0))))

 (define spectral-norm-test-core (lambda (u v n i limit)
                                  (if (< i limit)
                                   (begin
                                    (ata-times-u u v n)
                                    (ata-times-u v u n)
                                    (spectral-norm-test-core u v n (+ i 1) limit)))))

 (define spectral-norm-test (lambda (u v n i limit)
                             (begin
                              (spectral-norm-test-core u v n i limit)
                              (/ (dot u v n) (dot v v n)))))

 (define spectral-norm (lambda (n)
                        (let ((u (make-vector n 1.0))
                              (v (make-vector n 0.0)))
                         (spectral-norm-test u v n 0 10))))

 (disassemble 'a)
 (disassemble 'a-times-u-core)
 (disassemble 'a-times-u)
 (disassemble 'at-times-u-core)
 (disassemble 'at-times-u)
 (disassemble 'ata-times-u)
 (disassemble 'dot)
 (disassemble 'spectral-norm-test)
 (disassemble 'spectral-norm)
 (spectral-norm 128))
>5500
