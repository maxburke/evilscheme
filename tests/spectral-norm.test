(begin

 (define a (lambda (i j)
            (/ 1.0 (+ (* (+ i j)
                         (/ (+ i (+ j 1)) 2.0)) 
                      (+ i 1)))))

 (define av-core (lambda (i j n v av)
                   (let ((x (vector-ref av i)))
                     (set! (vector-ref av i) (+ x (* (a i j) (vector-ref v j)))))))

 (define multiply-av (lambda (i n v av)
                       (set! (vector-ref av i) 0)
                       (av-core i 0 n v av)
                       (if (< i n)
                         (multiply-av (+ 1 i) n v av))))

 (define at-v-core (lambda (i j n v at-v)
                     (let ((x (vector-ref at-v i)))
                       (set! (vector-ref at-v i) (+ x (* (a j i) (vector-ref v j)))))))

 (define multiply-at-v (lambda (i n v at-v)
                         (set! (vector-ref at-v i) 0)
                         (at-v-core i 0 n v at-v)
                         (if (< i n)
                           (multiply-at-v (+ 1 i) n v at-v))))

 (define at-times-av (lambda (n v at-av)
                       (let ((u (make-vector (+ n 1))))
                         (begin
                         (multiply-av 0 n v u)
                         (multiply-at-v 0 n u at-av)))))

 (define spectral-norm-test-core (lambda (u v n i limit)
                                  (if (< i limit)
                                   (begin
                                    (at-times-av n u v)
                                    (at-times-av n v u)
                                    (spectral-norm-test-core u v n (+ i 1) limit)))))
 (define dot (lambda (v u n i sum)
                          (if (> i n)
                            sum
                            (let ((v0 (vector-ref v i))
                                  (u0 (vector-ref u i)))
                              (begin
                              (dot v u n (+ i 1) (+ sum (+ (* v0 v0) (* u0 u0)))))))))

 (define spectral-norm-test (lambda (u v n i limit)
                             (begin
                              (spectral-norm-test-core u v n i limit)
                              (/ (dot u v n 0 0.0) (dot v v n 0 0.0)))))

 (define spectral-norm (lambda (n)
                        (let ((u (make-vector (+ n 1) 1.0))
                              (v (make-vector (+ n 1) 0.0)))
                         (spectral-norm-test u v (- n 1) 0 10))))

 (spectral-norm 128))
>1.345559
