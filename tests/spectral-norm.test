(begin
 ; double eval_A(int i, int j) { return 1.0/((i+j)*(i+j+1)/2+i+1); }
 (define a (lambda (i j)
            (/ 1.0 (+ (* (+ i j)
                         (/ (+ i (+ j 1)) 2.0)) 
                      (+ i 1)))))

 (define a-times-u-core (lambda (i j n u au)
                         (if (< j n)
                          (begin
                           (let ((x (vector-ref au i))
                                 (y (+ x (* (a i j) (vector-ref u j)))))
                            (set! (vector-ref au i) y)
                            (a-times-u-core i (+ 1 j) n u au))))))

 (define a-times-u (lambda (i n u au)
                       (if (< i n)
                        (begin
                         (set! (vector-ref au i) 0)
                         (a-times-u-core i 0 n u au)
                         (a-times-u (+ 1 i) n u au)))))

 (define at-times-u-core (lambda (i j n u at-u)
                          (if (< j n)
                           (begin
                            (let ((x (vector-ref at-u i))
                                  (y (+ x (* (a j i) (vector-ref u j)))))
                             (set! (vector-ref at-u i) y)
                             (at-times-u-core i (+ 1 j) n u at-u))))))

 (define at-times-u (lambda (i n u at-u)
                         (if (< i n)
                          (begin
                           (set! (vector-ref at-u i) 0)
                           (at-times-u-core i 0 n u at-u)
                           (at-times-u (+ 1 i) n u at-u)))))

 (define ata-times-u (lambda (n u at-au)
                       (let ((v (make-vector n)))
                         (begin
                         (a-times-u 0 n u v) ;; review
                         (at-times-u 0 n v at-au))))) ;; review

 (define spectral-norm-test-core (lambda (u v n i limit)
                                  (if (< i limit)
                                   (begin
                                    (ata-times-u n u v)
                                    (ata-times-u n v u)
                                    (spectral-norm-test-core u v n (+ i 1) limit)))))
 (define dot (lambda (v u n i sum)
                          (if (< i n)
                            (let ((v0 (vector-ref v i))
                                  (u0 (vector-ref u i)))
                              (begin
                               (dot v u n (+ i 1) (+ sum (* u0 v0)))))
                            sum)))

 (define spectral-norm-test (lambda (u v n i limit)
                             (begin
                              (spectral-norm-test-core u v n i limit)
                              (/ (dot u v n 0 0.0) (dot v v n 0 0.0)))))

 (define spectral-norm (lambda (n)
                        (let ((u (make-vector n 1.0))
                              (v (make-vector n 0.0)))
                         (spectral-norm-test u v n 0 10))))

 (spectral-norm 128))
>1.623642
